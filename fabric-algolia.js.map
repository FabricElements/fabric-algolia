{"version":3,"file":"fabric-algolia.js","sourceRoot":"","sources":["fabric-algolia.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright FabricElements. All Rights Reserved.\n *\n * `fabric-algolia`\n * Algolia search component\n *\n * @demo demo/index.html\n */\nimport \"algoliasearch/dist/algoliasearch.min.js\";\nimport {customElement, LitElement, property, PropertyValues} from \"lit-element\";\n\n@customElement(\"fabric-algolia\")\nexport class FabricAlgolia extends LitElement {\n  /**\n   * Algolia Application ID\n   */\n  @property({type: String, attribute: \"application-id\"})\n  public applicationId = null;\n\n  /**\n   * Algolia Api Key\n   */\n  @property({type: String, attribute: \"api-key\"}) public apiKey = null;\n\n  /**\n   * Index\n   */\n  @property({type: String, attribute: \"index\"}) public index = null;\n\n  /**\n   * Algolia Settings\n   */\n  @property({type: Object, attribute: \"settings\"}) public settings = null;\n\n  /**\n   * Algolia Settings\n   */\n  @property({type: Object, attribute: \"response\"}) public response = null;\n\n  /**\n   * Response hits\n   */\n  @property({type: Array, attribute: \"hits\", reflect: true}) public hits = [];\n\n  /**\n   * Response error\n   */\n  @property({type: Object, attribute: \"error\", reflect: true})\n  public error = {};\n\n  /**\n   * Response error\n   */\n  @property({type: String, attribute: \"query\"}) public query = null;\n\n  /**\n   * Update event\n   * @param {PropertyValues} changedProperties\n   */\n  protected updated(changedProperties: PropertyValues) {\n    // @ts-ignore\n    changedProperties.forEach((oldValue, propName) => {\n      switch (propName) {\n        case \"query\":\n          this._queryObserver();\n          break;\n        case \"hits\":\n        case \"error\":\n        case \"response\":\n          this._notify(`${propName}-changed`);\n          break;\n      }\n    });\n  }\n\n  /**\n   * Send query to Algolia & return results.\n   *\n   * @private\n   */\n  private _queryObserver() {\n    this.error = null;\n    this.hits = [];\n    const query = this.query;\n    if (!query) {\n      return;\n    }\n\n    /**\n     * Reference basic properties\n     */\n    const index = this.index;\n    const applicationID = this.applicationId;\n    const apiKey = this.apiKey;\n    const settings = this.settings;\n\n    let error = {\n      message: \"Something is missing: \",\n      status: 400,\n    };\n\n    if (!applicationID || !apiKey || !index) {\n      if (!applicationID) {\n        error.message += \"applicationId, \";\n      }\n      if (!apiKey) {\n        error.message += \"apiKey, \";\n      }\n      if (!index) {\n        error.message += \"index\";\n      }\n      this.error = error;\n      return;\n    }\n\n    /**\n     * Set up algolia search\n     */\n    // @ts-ignore\n    const client = window.algoliasearch(applicationID, apiKey);\n    const indexRef = client.initIndex(index);\n    // Define search settings\n    if (settings) {\n      indexRef.setSettings(settings);\n    }\n\n    indexRef.search(query, (err, content) => {\n      if (err) {\n        this.error = err;\n      }\n      this.response = content;\n      this.hits = content.hasOwnProperty(\"hits\") ? content.hits : [];\n    });\n  }\n\n  /**\n   * Trigger event\n   *\n   * @param {string} name\n   * @private\n   */\n  private _notify(name) {\n    const event = new CustomEvent(name, {\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(event);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"fabric-algolia\": FabricAlgolia;\n  }\n}\n"]}